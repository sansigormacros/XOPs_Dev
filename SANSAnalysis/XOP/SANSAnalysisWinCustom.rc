/*	XOP-specific resources for XOP1 on Windows

	This file is compiled by the resource compiler and creates XOP-specific
	resources that IGOR looks for in an XOP module.
*/

#include "XOPResources.h"			// Defines XOP-specific symbols.

/* no custom error messages */

/* no menu item */

1100 XOPI							// XOPI - Describes general XOP properties to IGOR. 
BEGIN
	XOP_VERSION,					// Version number of host XOP system.
	DEV_SYS_CODE,					// Code for development system used to make XOP.
	0,								// Obsolete - set to zero.
	0,								// Obsolete - set to zero.
	XOP_TOOLKIT_VERSION				// XOP Toolkit version.
END

1100 STR#
BEGIN
	/* [1] */
	"CylinderFit requires Igor Pro 2.0 or later",
	/* [2] */
	"Wave does not exist.",
	/* [3] */
	"Coefficient wave must be single or double precision floating point.",
	/* Null to terminate resource */
	"\0" 
END

1101 STR#
BEGIN
	"-1",								// -1 means we don't want to add a menu item.
	"No Menu Item",						// Igor ignores item 2 because item 1 is -1.
	"CylinderFit Help",					// Name of XOP's help file.
	"\0"								// Null to terminate resource
END


1100 XOPF
BEGIN
/// Sphere functions		
		"MultiShellSphereX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */			
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,

		"PolyMultiShellX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */			
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,

		"SphereFormX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */		
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */	
			0,

		"CoreShellSphereX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */			
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,

		"PolyCoreFormX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */			
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,

		"PolyCoreShellRatioX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */			
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,

		"VesicleFormX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */	
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,

		"SchulzSpheresX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */	
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,

		"PolyRectSpheresX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */	
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,

		"PolyHardSpheresX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */	
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,

		"BimodalSchulzSpheresX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */	
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,

		"GaussSpheresX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */	
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,

		"LogNormalSphereX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */	
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,

		"BinaryHSX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */		
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,

		"BinaryHS_PSF11X\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */		
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,

		"BinaryHS_PSF12X\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */		
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,

		"BinaryHS_PSF22X\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */	
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,
/// Cylinder functions
		"CylinderFormX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */		
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,

		"EllipCyl76X\0",					/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */	
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,

		"EllipticalCylinderX\0",					/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */	
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,

		"TriaxialEllipsoidX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */		
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,

		"ParallelepipedX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */	
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,

		"HollowCylinderX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */	
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,

		"EllipsoidFormX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */		
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,

		"Cyl_PolyRadiusX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */	
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,

		"Cyl_PolyLengthX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */	
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,

		"CoreShellCylinderX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */		
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,

		"OblateFormX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */		
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,

		"ProlateFormX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */	
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,

		"FlexExclVolCylX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */		
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,

		"FlexCyl_PolyLenX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */	
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,

		"FlexCyl_PolyRadX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */		
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,

		"FlexCyl_EllipX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */		
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,

		"PolyCoShCylinderX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */	
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,

		"StackedDiscsX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */	
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,

		"LamellarFFX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */	
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,

		"LamellarFF_HGX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */	
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,

		"LamellarPSX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */	
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,

		"LamellarPS_HGX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */	
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,

/// Two phase models
		"TeubnerStreyModelX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */	
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,

		"Power_Law_ModelX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */	
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,

		"Peak_Lorentz_ModelX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */	
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,

		"Peak_Gauss_ModelX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */	
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,

		"Lorentz_ModelX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */	
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,

		"FractalX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */	
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,

		"DAB_ModelX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,

		"OneLevelX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */	
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,

		"TwoLevelX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */	
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,

		"ThreeLevelX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */	
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,

		"FourLevelX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */	
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,

/// Structure Factor Functions		
		"HardSphereStructX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */	
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,
		
		"SquareWellStructX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */	
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,
		
		"StickyHS_StructX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */	
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,
		
		"HayterPenfoldMSAX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == Utility */
		NT_FP64,							/* return value type */
			NT_FP64 + WAVE_TYPE,			/* double precision wave (coefficient wave) */
			NT_FP64,						/* double precision x */
			0,
		
		"DiamCylX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,				/* function category */
		NT_FP64,							/* return value type */	
			NT_FP64,						/* parameter types */
			NT_FP64,
			0,
		
		"DiamEllipX\0",						/* function name */
		F_UTIL | F_THREADSAFE | F_EXTERNAL,				/* function category */
		NT_FP64,							/* return value type */	
			NT_FP64,						/* parameter types */
			NT_FP64,
			0,
		
/// Resolution smearing functions
		"Smear_Model_20_X\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */	
			HSTRING_TYPE,
			NT_FP64,					/* double precision x */
			NT_FP64,					/* double precision x */
			NT_FP64,					/* double precision x */
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,
		
		"Smear_Model_76_X\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */	
			HSTRING_TYPE,
			NT_FP64,					/* double precision x */
			NT_FP64,					/* double precision x */
			NT_FP64,					/* double precision x */
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,
		
		"SmearedCyl_PolyRadiusX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */		
			NT_FP64,					/* double precision x */
			NT_FP64,					/* double precision x */
			NT_FP64,					/* double precision x */
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,

//2D functions from DANSE

		"Cylinder_2DX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			NT_FP64,					/* double precision x */
			0,

		"Cylinder_2D_Weight2DX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			NT_FP64,					/* double precision x */
			0,

		"CoreShellCylinder_2DX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			NT_FP64,					/* double precision x */
			0,

		"CoreShellCylinder_2D_Weight2DX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			NT_FP64,					/* double precision x */
			0,

		"Ellipsoid_2DX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			NT_FP64,					/* double precision x */
			0,

		"Ellipsoid_2D_Weight2DX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			NT_FP64,					/* double precision x */
			0,

		"EllipticalCylinder_2DX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			NT_FP64,					/* double precision x */
			0,

		"EllipticalCylinder_2D_Weight2DX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			NT_FP64,					/* double precision x */
			0,

		"Sphere_2DX\0",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			NT_FP64,					/* double precision x */
			0,

/// new models in 2008 (starts index 68)

		"SpherocylinderX",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,
		
		"ConvexLensX",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,
		
		"DumbbellX",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,
		
		"CappedCylinderX",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,
		
		"BarbellX",
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,
// index # 73 is Lamellar_ParaCrystalX		
		"Lamellar_ParaCrystalX",				
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,
		
		"BCC_ParaCrystalX",				
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,
		
		"FCC_ParaCrystalX",				
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,
		
		"SC_ParaCrystalX",				
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,
		
		"OneShellX",				
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,
		
		"TwoShellX",				
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,
		
		"ThreeShellX",				
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,
		
		"FourShellX",				
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,
		
		"PolyOneShellX",				
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,
		
		"PolyTwoShellX",				
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,
		
		"PolyThreeShellX",				
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,
		
		"PolyFourShellX",		//case # 84
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,
				
		"BroadPeakX",		//case # 85
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,
		
		"CorrLengthX",		//case # 86
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,
		
		"TwoLorentzianX",		//case # 87
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,
		
		"TwoPowerLawX",		//case # 88
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,

		"PolyGaussCoilX",		//case # 89
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,
		
		"GaussLorentzGelX",		//case # 90
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,

		"GaussianShellX",		//case # 91
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,
		
		"PolyCoreBicelleX",		//case # 92
		F_UTIL | F_THREADSAFE | F_EXTERNAL,					/* function category == UTILITY */
		NT_FP64,						/* return value type */			
			NT_FP64 + WAVE_TYPE,				/* double precision wave (coefficient wave) */
			NT_FP64,					/* double precision x */
			0,
	0,
END
